<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on 何年重遇天涯</title>
    <link>/tags/syntax/</link>
    <description>Recent content in Syntax on 何年重遇天涯</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 26 Nov 2021 21:27:00 +0800</lastBuildDate><atom:link href="/tags/syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL</title>
      <link>/post/programming/sql/</link>
      <pubDate>Fri, 26 Nov 2021 21:27:00 +0800</pubDate>
      
      <guid>/post/programming/sql/</guid>
      <description>MySQL 预编译批量插入 当预编译批量插入的时候数据量太大MySQL服务器会报错, 还是直接拼values的sql吧 1 Error 1390: Prepared statement contains too many placeholders 查询所有数据库占用</description>
    </item>
    
    <item>
      <title>结构体</title>
      <link>/post/programming/struct/</link>
      <pubDate>Tue, 31 Aug 2021 10:29:00 +0800</pubDate>
      
      <guid>/post/programming/struct/</guid>
      <description>定义 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // c #include &amp;lt;stdio.h&amp;gt;typedef struct _user { char name[64]; int age; } user; int main(int argc, char *argv[]) { user user = { .name=&amp;#34;jack&amp;#34;, .age=20 }; printf(&amp;#34;%s\n&amp;#34;, user.name); printf(&amp;#34;%d\n&amp;#34;, user.age); return 0; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</description>
    </item>
    
    <item>
      <title>Elisp</title>
      <link>/post/programming/elisp/</link>
      <pubDate>Wed, 18 Aug 2021 21:56:00 +0800</pubDate>
      
      <guid>/post/programming/elisp/</guid>
      <description>定义变量 全局变量 1 2 (setq a1 3) (defvar a1 3 &amp;#34;temp varlue&amp;#34;) ;; 多了一个变量描述字符串 C-h v能看到描述 局部变量 let中变量列表的赋值顺序是不定的，因此在第一个例子里 a3 无</description>
    </item>
    
    <item>
      <title>Redis notes</title>
      <link>/post/programming/redis_note/</link>
      <pubDate>Fri, 16 Oct 2020 10:16:00 +0800</pubDate>
      
      <guid>/post/programming/redis_note/</guid>
      <description>Redis notes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 连接 redis-cli -h host -p port -a &amp;#39;password&amp;#39; # 地图经纬度半径查询 GEORADIUS SHOP:COORDINATES 112.936512 28.210319 5000 m WITHCOORD WITHDIST COUNT 20 ASC # 模糊搜索KEY KEYS user_id_* # 模糊清楚KEY redis-cli -h &amp;#39;host&amp;#39; -p port</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>/post/programming/golang/</link>
      <pubDate>Wed, 05 Aug 2020 23:08:00 +0800</pubDate>
      
      <guid>/post/programming/golang/</guid>
      <description>Golang 知识点 声明变量 var 可以不用初始化,var 声明初始化可以省略类型,简短声明左边必须有一个未声明变量且右边必须初始化 1 2 3 var a, b, c int var d = 1 d, e</description>
    </item>
    
    <item>
      <title>C macro definition</title>
      <link>/post/programming/c_macro_definition/</link>
      <pubDate>Thu, 14 May 2020 20:06:39 +0800</pubDate>
      
      <guid>/post/programming/c_macro_definition/</guid>
      <description>Get structure member offset bytes You only need to include &amp;lt;stddef.h&amp;gt; to use offset or write the following code 1 #define offsetof(TYPE, MEMBER) ((size_t) &amp;amp;((TYPE *)0)-&amp;gt;MEMBER) Get structure size 1 2 #define ALIGN(size, boundary) (((size) + ((boundary)-1)) &amp;amp; ~((boundary)-1)) #define ALIGN_DEFAULT(size) ALIGN(size, 8) &amp;lt;stdbool.h&amp;gt; You can use Booleans as long as you include &amp;lt;stdbool.h&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #ifndef _STDBOOL</description>
    </item>
    
    <item>
      <title>Data Type</title>
      <link>/post/programming/data_type/</link>
      <pubDate>Mon, 18 Jun 2018 15:20:41 +0800</pubDate>
      
      <guid>/post/programming/data_type/</guid>
      <description>C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 整形: short int long 数值类型: 浮点类型: float double 基本数据类型: 字符类型: char 空类型(void) 指针类型 构</description>
    </item>
    
    <item>
      <title>Operator Priority</title>
      <link>/post/programming/operator_priority/</link>
      <pubDate>Fri, 13 Oct 2017 15:13:01 +0800</pubDate>
      
      <guid>/post/programming/operator_priority/</guid>
      <description>++i和i++特殊例子 1 2 3 4 5 int a, i= 0 a = ++i // a = 1, i = 1 int b, j = 0 b = i++ // b = 0, j = 1</description>
    </item>
    
  </channel>
</rss>
